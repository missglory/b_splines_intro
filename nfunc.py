import numpy as np
import matplotlib.pyplot as plt
n = 4
q = 3
tmax = 100
knot = np.array([0,0,0,0.333,0.666,1,1,1])
n0 = np.array([
[0.000, 0.006, 0.024, 0.054, 0.097, 0.151, 0.218, 0.296, 0.387, 0.490, 0.590, 0.666, 0.718, 0.745, 0.748, 0.728, 0.682, 0.613, 0.520, 0.414, 0.320, 0.238, 0.168, 0.110, 0.065, 0.031, 0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 
[0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.005, 0.022, 0.051, 0.092, 0.146, 0.211, 0.289, 0.378, 0.480, 0.582, 0.660, 0.714, 0.744, 0.749, 0.730, 0.688, 0.620, 0.529, 0.423, 0.328, 0.245, 0.174, 0.115, 0.068, 0.034, 0.011, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 
[0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.004, 0.020, 0.048, 0.088, 0.140, 0.205, 0.281, 0.370, 0.470, 0.574, 0.654, 0.710, 0.742, 0.750, 0.733, 0.692, 0.628, 0.538, 0.432, 0.336, 0.252, 0.180, 0.120, 0.072, 0.036, 0.013, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 
[0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.003, 0.018, 0.045, 0.084, 0.135, 0.198, 0.274, 0.361, 0.461, 0.565, 0.648, 0.706, 0.740, 0.750, 0.736, 0.697, 0.634, 0.548, 0.442, 0.344, 0.259, 0.186, 0.125, 0.076, 0.039, 0.014, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 
[0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.002, 0.016, 0.042, 0.080, 0.130, 0.192, 0.266, 0.353, 0.451, 0.556, 0.641, 0.702, 0.738, 0.750, 0.738, 0.702, 0.641, 0.556, 0.451, 0.353, 0.266, 0.192, 0.130, 0.080, 0.042, 0.016, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 
[0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.002, 0.014, 0.039, 0.076, 0.125, 0.186, 0.259, 0.344, 0.442, 0.548, 0.634, 0.697, 0.736, 0.750, 0.740, 0.706, 0.648, 0.565, 0.461, 0.361, 0.274, 0.198, 0.135, 0.084, 0.045, 0.018, 0.003, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 
[0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.013, 0.036, 0.072, 0.120, 0.180, 0.252, 0.336, 0.432, 0.538, 0.627, 0.692, 0.733, 0.750, 0.742, 0.710, 0.654, 0.574, 0.470, 0.370, 0.281, 0.205, 0.140, 0.088, 0.048, 0.020, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 
[0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.001, 0.011, 0.034, 0.068, 0.115, 0.174, 0.245, 0.328, 0.423, 0.529, 0.620, 0.688, 0.730, 0.749, 0.744, 0.714, 0.660, 0.582, 0.480, 0.378, 0.289, 0.211, 0.146, 0.092, 0.051, 0.022, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000], 



])
tn = np.linspace(0., 1., n0[0].shape[0])
# for i in range(n + q):
#     for dt in range(tmax):
#         if tn[dt] >= knot[i] and tn[dt] < knot[i + 1]:
#             n0[i,dt] = 1

# //    for (int dq = 1; dq < 3; dq++)
# //    {
# //        for (int j = 0; j < n + dq - 1; j++)
# //        {
# //            for (int i = 0; i < tn; i++)
# //            {
# //                float t = (float)i / tn;
# //                float mul1 = N[dq - 1].at<float>(j, i);
# //                float mul2 = N[dq - 1].at<float>(j + 1, i);
# //                float del1 = knots[j + dq] - knots[j];
# //                float del2 = knots[j + dq + 1] - knots[j + 1];
# //                float dist1 = t - knots[j];
# //                float dist2 = (knots[j + dq + 1] - t);
# //                if (del1 > eps && mul1 > eps)
# //                {
# //                    N[dq].at<float>(j, i) = dist1 / del1 * mul1;
# //                }
# //                if (del2 > eps && mul2 > eps) {
# //                    N[dq].at<float>(j, i) += dist2 / del2 * mul2;
# //                }
# //            }
# //        }
# //    }
# nnext = np.zeros((n + q, tmax))

# for dq in range(1, 3):
#     for j in range (n + q - dq):
#         for i in range(tmax):
#             t = i // tmax
#             mul1 = n0[j, i]
#             mul2 = n0[j + 1, i]
#             del1 = knot[j + dq] - knot[j]
#             del2 = knot[j + dq + 1] - knot[j + 1]
#             dist1 = t - knot[j]
#             dist2 = knot[j + dq + 1] - t
#             if del1 > 0 and mul1 > 0:
#                 nnext[j, i] = dist1 // del1 * mul1
#             if del2 > 0 and mul2 > 0:
#                 nnext[j, i] += dist2 // del2 * mul2


for i in range(9):
    plt.plot(tn, n0[i].flatten(), '.')
plt.show()